"""
Django settings for ops project.

Generated by 'django-admin startproject' using Django 1.11.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import datetime
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd8b%_va3f-u55@vz8euas$nhdg9cx8w&@03u$^$04(@^^w*&'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False
DEBUG = True
ALLOWED_HOSTS = ["*"]
ADMIN_LOGIN = "admin"

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'

# Application definition

DOMAIN = "@xxx.com"
# 需要过滤掉的网卡设备名
FILTER_NETWORK_DEVICE = ["docker", "veth", "tun", "sit", "br"]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'users.apps.UsersConfig',
    'groups.apps.GroupsConfig',
    'menu.apps.MenuConfig',
    'permissions.apps.PermissionsConfig',
    'products.apps.ProductConfig',
    'manufacturers.apps.ManufacturersConfig',
    'servers.apps.ServersConfig',
    'idcs.apps.IdcsConfig',
    'vpcs.apps.VpcsConfig',
    'cabinet.apps.CabinetConfig',
    'rest_framework.authtoken',
    'zabbix.apps.ZabbixConfig',
    'rest_framework_swagger',
    'drf_yasg',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

#跨域设置：允许所有域名访问
CORS_ORIGIN_WHITELIST = (
    '*'
)

ROOT_URLCONF = 'ops.urls'

AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "cmdb",
        'USER': 'root',
        'PASSWORD': "123456",
        'HOST': "127.0.0.1",
        'PORT': "3306",
        'OPTIONS': {
            'init_command': "SET default_storage_engine=INNODB;SET sql_mode='STRICT_TRANS_TABLES'"
        }
    },
   # "zabbix": {
   #     'ENGINE': 'django.db.backends.mysql',
   #     'NAME': "zabbix",
   #     'USER': 'zabbix',
   #     'PASSWORD': "zabbix",
   #     'HOST': "192.168.1.111",
   #     'OPTIONS': {
   #         'init_command': "SET storage_engine=INNODB;SET sql_mode='STRICT_TRANS_TABLES'"
   #     }
   # }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# 这里修改为不同于static的目录名字 配置 Nginx 所需
STATIC_URL = '/statics/'
STATIC_ROOT = os.path.join(BASE_DIR, "statics/")

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ("django_filters.rest_framework.DjangoFilterBackend",),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # 重写 rest_framework 自带的权限类，改为可控、随意自定义的权限
        'ops.permissions.ModelPermissions',
    ),
    'DEFAULT_PAGINATION_CLASS': 'ops.paginations.Pagination',
    'PAGE_SIZE': 10
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        }
    }
}

# JWT 官方文档：https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/docs/index.md
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=5),
    'JWT_AUTH_HEADER_PREFIX': 'xxx',
}


# 对接 ZABBIX
ZABBIX_API = "http://zabbix.xxx.com/zabbix/"
ZABBIX_ADMIN_USER = "xxx"
ZABBIX_ADMIN_PASS = "xxx."
ZABBIX_DEFAULT_HOSTGROUP = "xxx"



## LDAP 配置开始 ###
import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, PosixGroupType, LDAPGroupQuery, GroupOfUniqueNamesType


AUTHENTICATION_BACKENDS = (
#首先验证本地认证方式
    'django.contrib.auth.backends.ModelBackend',
#本地认证不过走LDAP认证
    'django_auth_ldap.backend.LDAPBackend',
)

# 服务器地址
AUTH_LDAP_SERVER_URI = "ldap://ldap.xxx.com"
AUTH_LDAP_BIND_DN = "cn=xxx,ou=xxx,dc=xxx,dc=com"
AUTH_LDAP_BIND_PASSWORD = "xxx"


# #这个dn要根据现实场景填写
base_dn='OU=xxx,DC=xxx,DC=com'
# #设置用户的搜索
AUTH_LDAP_USER_SEARCH = LDAPSearch(base_dn, ldap.SCOPE_SUBTREE,
                                   "(&(objectClass=person)(cn=%(user)s))",
                                   attrlist=['cn', 'mail', 'displayName'])

# key为数据库字段名，value为ldap中字段名，此字典解决django model与ldap字段名可能出现的不一致问题
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "cn",
    "name": "displayName",
    "email": "mail",
    # "first_name": "givenName",
    # "last_name": "sn",
}


AUTH_LDAP_ALWAYS_UPDATE_USER = True

# # 通过组进行权限控制
AUTH_LDAP_GROUP_SEARCH = LDAPSearch('cn=xxx,ou=group,dc=xxx,dc=com', ldap.SCOPE_SUBTREE,
                                    '(&(objectclass=groupOfUniqueNames) \
                                    (uniqueMember=%(user)s))')

AUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType(name_attr="cn")

# 组的DN  作用: 只有指定组的用户可以访问
AUTH_LDAP_REQUIRE_GROUP = "cn=xxx,ou=xxx,dc=xxx,dc=com"

# 导入用户的组信息
# AUTH_LDAP_MIRROR_GROUPS = True
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_CACHE_GROUPS = True
AUTH_LDAP_GROUP_CACHE_TIMEOUT = 600

# is_staff:这个组里的成员可以登录；is_superuser:组成员是django admin的超级管理员；is_active:组成员可以登录django admin后台，但是无权限查看后台内容
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#     "is_staff": "cn=xxx,ou=group,DC=xxx,DC=com",
#     # "is_superuser": "cn=xxx,ou=group,DC=xxx,DC=com",
# }

#  通过组进行权限控制end
## LDAP 配置完毕###

# 配置日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        "default": {
            "format": '{levelname} {name} {asctime} {pathname} [{lineno}] {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'debug.log'),
            'when': 'D',
            'interval': 7,
            'formatter': 'default'
        },
        'django_ldap': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_ldap.log'),
            'when': 'D',
            'interval': 30,
            'formatter': 'default'
        },
        'request': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'request.log'),
            'formatter': 'default'
        },
        'server_request':{
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'server_request.log'),
            'formatter': 'default'
        },
        'root': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'root.log'),
            'formatter': 'default'
        },
        'db_backends': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'db_backends.log'),
            'formatter': 'default'
        },
    },

    'loggers': {
        'django': {
            'level': 'DEBUG',
            'handlers': ['file'],
            'propagate': False
        },
        'django.request': {
            'level': 'DEBUG',
            'handlers': ["request"],
            'propagate': False
        },
        'django.server':{
            'level': 'DEBUG',
            'handlers': ["server_request"],
            'propagate': False
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ["db_backends"],
            'propagate': False
        },
        'django_auth_ldap': {
            'level': 'DEBUG',
            'handlers': ["django_ldap"],
            'propagate': False
        },
        # 'django.request': {
        #     'handlers': ['mail_admins'],
        #     'level': 'ERROR',
        #     'propagate': False,
        # },
#         'myproject.custom': {
#             'handlers': ['console', 'mail_admins'],
#             'level': 'INFO',
#             'filters': ['special']
#         },
        'devops':{
            "level": "DEBUG",
            "handlers": ["file"],
            'propagate': False
        },
    },
    'root': {
        "level": "DEBUG",
        "handlers": ["root"],
    }
}

